{\rtf1\ansi\ansicpg1252\cocoartf1038\cocoasubrtf360
{\fonttbl\f0\fmodern\fcharset0 CourierNewPSMT;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww13840\viewh14480\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\ql\qnatural\pardirnatural

\f0\fs38 \cf0 \
# what is derivative\
# what is partial derivative\
# why quadratic eqn\
\
# sage, Software for Algebra and Geometry Experimentation. Collects from other open source packages\
# symbolic, algebra. Good to check maths\
# free, open source. \
# based on python, can plot, make functions, etc. \
\
sqrt(2.0)\
sqrt(-2)\
# n() to evaluate, numerical approximation\
n(sqrt(2.0))\
n(sqrt(-2))\
\
# make an object\
a = 2\
A = (1,2,3,4) # round brackets make a tuple. tuples cannot be changed!\
# indexing is zero-based!\
A[0] # square bracket to get the location\
A[1:3]\
A[1:] \
B = [0,1,'x'] # square brackets make a list, like in R, can have different types. Can be changed\
\
I = matrix([[1,0],[0,1]]) # identity matrix\
N\
# define something as a variable\
N = var('N')\
# now 'N' is not a number anymore\
\
# plot\
plot(N) \
plot(N) # default, -1-1\
plot(N, 0, 10)\
\
# add r\
r = 0.2\
pl = plot(r*N, 0, 10) \
show(pl)\
pl.show() # two ways of doing a function. \
# add K as another variable\
K = 20\
# population growth function\
pl = plot(r*N*(1-N/K), 0, 30)\
show(pl)\
\
# save image\
pl.save('myplot.png')\
save(pl, 'myplot.png')\
\
# save texts\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf0 #o = open('file.txt','w') \
#o.write(str(A[,])) # have to make it str()\
#o.close()\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\ql\qnatural\pardirnatural
\cf0 \
# save script with '.sage' in an editor\
load 'example.sage'\
or in terminal: $ sage /myexample.sage\
\
#######################\
# make an equation (sage sees as algebraic equation)\
reset()\
var('r,N,K')\
dNdt = r*N*(1-N/K)  # logistic growth\
\
dNdt(r = 0.1, N =10, K = 20) # evaluate equation at certain parameters\
\
solve(dNdt == 0, N) # what is N when the derivative is zero (no change)?\
\
sols = solve(dNdt == 0, N) # two equilibria, one unstable(will grow from zero)\
sols[0] # choose one equilibrium, N = K, the stable one.\
\pard\pardeftab720\ql\qnatural
\cf0 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\ql\qnatural\pardirnatural
\cf0 #dNdt.derivative(N) # partial derivative with respect to N\
#derivative(dNdt, N) # partial derivative with respect to N\
\
#######################\
# predator-prey equation, Lotka Volterra\
reset()\
var('r,N,K,a,P,d')\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf0 # K is the carrying capacity, or the enrichment\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\ql\qnatural\pardirnatural
\cf0 dN = r*N - a*N*P 			# prey\
dP = a*N*P - d*P			# predator\
# a - attack rate\
\
\
# find equilibria\
solve(dN == 0, N)\
solve(dN == 0, P)\
solve(dP == 0, P)\
solve(dP == 0, N)\
\
# or solve together\
bothsols = solve([dN,dP], [N, P])\
\
# take the partial derivatives\
a11 = derivative(dN, N)\
a12 = derivative(dN, P)\
a21 = derivative(dP, N)\
a22 = derivative(dP, P)\
\
\pard\pardeftab720\ql\qnatural
\cf0 J = matrix([[a11,a12], [a21,a22]]) # matrix of partial derivatives\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab720\ql\qnatural\pardirnatural
\cf0 \
# or use the built in function \
J = jacobian([dN, dP], [N,P])\
J \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\ql\qnatural\pardirnatural
\cf0 \
\
###########\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf0 # evaluate the J at the eqm points.\
# first trivial eqm\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\ql\qnatural\pardirnatural
\cf0 J1 = J.substitute(bothsols[0][0]) # substitute sequentially to get rid of N\
J1\
J2 = J1.substitute(bothsols[0][1]) # substitute sequentially to get rid of P\
J2 # saddle point\
J2.eigenvalues()\
# [r,-d]\
\
# non-trivial eqm\
J1 = J.substitute(bothsols[1][0]) # substitute sequentially to get rid of N\
J1\
J2 = J1.substitute(bothsols[1][1]) # substitute sequentially to get rid of P\
J2\
J2.eigenvalues()\
eigs = J2.eigenvalues()\
eigs[0](d = 0.1, r = 0.5)\
# imaginary values only\
}